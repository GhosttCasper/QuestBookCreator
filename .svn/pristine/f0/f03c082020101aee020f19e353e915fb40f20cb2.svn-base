using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Drawing;

namespace QuestBookCreator
{
    class Project
    {
        List<Node> pars = new List<Node>();
        List<Edge> edges = new List<Edge>();
        static int naming = 0;


        public void addNode(Node k)
        {
            k.set_name(naming.ToString());
            pars.Add(k);
            naming++;
        
        
        }

        public void addEdge(Edge e)
        {
            edges.Add(e);
          
        }

        public Node getNode(int x, int y)
        {
            int w = Constants.nodeWidth;
            int h = Constants.nodeHeight;


            for (int i = 0; i < pars.Count; i++)
                if ((x >= pars[i].get_x()) && (x <= pars[i].get_x() + w) && (y >= pars[i].get_y()) && (y <= pars[i].get_y() + h))
                    return pars[i];

            return null;
        }

        public void Paint(Graphics g)
        {

            refreshEdges();

            for (int i = 0; i < pars.Count; i++)            //рисуем узлы
                pars[i].Draw(g);

            for (int i = 0; i < edges.Count; i++)            //рисуем узлы
                edges[i].Draw(g);
        }


        void refreshEdges()
        {
            //for (iteratorEdge = vectorEdge.begin(); iteratorEdge != vectorEdge.end(); iteratorEdge++)
            //{
            //    int coor1 = (*iteratorEdge)->get_v1();
            //    int coor2 = (*iteratorEdge)->get_v2();
            //    (*iteratorEdge)->change_coordinates(vectorVertex[coor1]->get_x(), vectorVertex[coor1]->get_y(), vectorVertex[coor2]->get_x(), vectorVertex[coor2]->get_y());
           // }

        }
    }
}
